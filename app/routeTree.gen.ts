/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as BoutiqueImport } from './routes/boutique'
import { Route as IndexImport } from './routes/index'
import { Route as KnowledgeIndexImport } from './routes/$knowledge/index'
import { Route as CollectionSlugImport } from './routes/$collection.$slug'
import { Route as KnowledgeCollectionSlugImport } from './routes/$knowledge/$collection.$slug'

// Create/Update Routes

const BoutiqueRoute = BoutiqueImport.update({
  id: '/boutique',
  path: '/boutique',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const KnowledgeIndexRoute = KnowledgeIndexImport.update({
  id: '/$knowledge/',
  path: '/$knowledge/',
  getParentRoute: () => rootRoute,
} as any)

const CollectionSlugRoute = CollectionSlugImport.update({
  id: '/$collection/$slug',
  path: '/$collection/$slug',
  getParentRoute: () => rootRoute,
} as any)

const KnowledgeCollectionSlugRoute = KnowledgeCollectionSlugImport.update({
  id: '/$knowledge/$collection/$slug',
  path: '/$knowledge/$collection/$slug',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/boutique': {
      id: '/boutique'
      path: '/boutique'
      fullPath: '/boutique'
      preLoaderRoute: typeof BoutiqueImport
      parentRoute: typeof rootRoute
    }
    '/$collection/$slug': {
      id: '/$collection/$slug'
      path: '/$collection/$slug'
      fullPath: '/$collection/$slug'
      preLoaderRoute: typeof CollectionSlugImport
      parentRoute: typeof rootRoute
    }
    '/$knowledge/': {
      id: '/$knowledge/'
      path: '/$knowledge'
      fullPath: '/$knowledge'
      preLoaderRoute: typeof KnowledgeIndexImport
      parentRoute: typeof rootRoute
    }
    '/$knowledge/$collection/$slug': {
      id: '/$knowledge/$collection/$slug'
      path: '/$knowledge/$collection/$slug'
      fullPath: '/$knowledge/$collection/$slug'
      preLoaderRoute: typeof KnowledgeCollectionSlugImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/boutique': typeof BoutiqueRoute
  '/$collection/$slug': typeof CollectionSlugRoute
  '/$knowledge': typeof KnowledgeIndexRoute
  '/$knowledge/$collection/$slug': typeof KnowledgeCollectionSlugRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/boutique': typeof BoutiqueRoute
  '/$collection/$slug': typeof CollectionSlugRoute
  '/$knowledge': typeof KnowledgeIndexRoute
  '/$knowledge/$collection/$slug': typeof KnowledgeCollectionSlugRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/boutique': typeof BoutiqueRoute
  '/$collection/$slug': typeof CollectionSlugRoute
  '/$knowledge/': typeof KnowledgeIndexRoute
  '/$knowledge/$collection/$slug': typeof KnowledgeCollectionSlugRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/boutique'
    | '/$collection/$slug'
    | '/$knowledge'
    | '/$knowledge/$collection/$slug'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/boutique'
    | '/$collection/$slug'
    | '/$knowledge'
    | '/$knowledge/$collection/$slug'
  id:
    | '__root__'
    | '/'
    | '/boutique'
    | '/$collection/$slug'
    | '/$knowledge/'
    | '/$knowledge/$collection/$slug'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BoutiqueRoute: typeof BoutiqueRoute
  CollectionSlugRoute: typeof CollectionSlugRoute
  KnowledgeIndexRoute: typeof KnowledgeIndexRoute
  KnowledgeCollectionSlugRoute: typeof KnowledgeCollectionSlugRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BoutiqueRoute: BoutiqueRoute,
  CollectionSlugRoute: CollectionSlugRoute,
  KnowledgeIndexRoute: KnowledgeIndexRoute,
  KnowledgeCollectionSlugRoute: KnowledgeCollectionSlugRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/boutique",
        "/$collection/$slug",
        "/$knowledge/",
        "/$knowledge/$collection/$slug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/boutique": {
      "filePath": "boutique.tsx"
    },
    "/$collection/$slug": {
      "filePath": "$collection.$slug.tsx"
    },
    "/$knowledge/": {
      "filePath": "$knowledge/index.tsx"
    },
    "/$knowledge/$collection/$slug": {
      "filePath": "$knowledge/$collection.$slug.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
